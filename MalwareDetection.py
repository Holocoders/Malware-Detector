from helpers import *
import pandas as pd
import os
from collections import defaultdict as dd
import random
import pickle
import argparse
import sklearn
import numpy as np
import pandas as pd
import requests
import shutil
import json
import re
import statistics
import pickle
import time
from ast import literal_eval 
import sklearn
from sklearn.ensemble import RandomForestClassifier

# dspth = "Features"

# dyn_ben = os.path.join(dspth, "benign_features.p")
# dyn_mal = os.path.join(dspth, "malware_features.p")

# with open(dyn_mal, "rb") as f:
#   dynamic_malware_train_data = pickle.load(f)
# with open(dyn_ben, "rb") as f:
#   dynamic_benign_train_data = pickle.load(f)

# dyn_mal = pd.DataFrame(dynamic_malware_train_data)
# dyn_ben = pd.DataFrame(dynamic_benign_train_data)
# labels = np.array([1]*len(dyn_mal) + [0]*len(dyn_ben))
# dyn_data = pd.concat([dyn_mal, dyn_ben])

# clf1 = RandomForestClassifier()

# with open(os.path.join(dspth, "test_dyn.p"), "rb") as f:
#     df_dyn = pickle.load(f)


# with open(os.path.join(dspth, "test_dyn_lab.p"), "rb") as f:
#     labels_dyn = pickle.load(f)

# clf1.fit(dyn_data, labels)
# arr = clf1.predict(df_dyn.values)
# print(sklearn.metrics.classification_report(labels_dyn, arr))


# stat_ben = os.path.join(dspth, "static_benign_features.p")
# stat_mal = os.path.join(dspth, "static_malware_features.p")

# with open(stat_mal, "rb") as f:
#   static_malware_data = pickle.load(f)
# with open(stat_ben, "rb") as f:
#   static_benign_data = pickle.load(f)


# static_malware = pd.DataFrame(static_malware_data)
# malware_label = [1]*len(static_malware_data)
# static_malware["label"] = malware_label

# static_benign = pd.DataFrame(static_benign_data)
# benign_label = [0]*len(static_benign_data)
# static_benign["label"] = benign_label

# static_dataset = pd.concat([static_malware, static_benign], axis=0)
# static_dataset_labels = static_dataset["label"]
# static_dataset = static_dataset.drop(["label"], axis=1)

# from sklearn.ensemble import RandomForestClassifier
# from sklearn.linear_model import SGDClassifier
# clf = RandomForestClassifier()

# with open(os.path.join(dspth, "test_stat.p"), "rb") as f:
#     df_stat = pickle.load(f)


# with open(os.path.join(dspth, "test_stat_lab.p"), "rb") as f:
#     labels_stat = pickle.load(f)

# clf.fit(static_dataset, static_dataset_labels)
# with open("static_model.p", "wb") as f:
#   pickle.dump(clf,f,protocol=pickle.HIGHEST_PROTOCOL)


# arr = clf.predict(df_stat.values)
# print(sklearn.metrics.classification_report(labels_stat, arr))

static_model_path = "static_model.p"
dynamic_model_path = "dynamic_model.p"

parser = argparse.ArgumentParser()
parser.add_argument("directory")
args = parser.parse_args()
dataset_path = args.directory

files = os.listdir(dataset_path)


def classify_dynamic(file):
    try:
        file_features = get_features_of_file(dataset_path, file)
        data = pd.DataFrame([file_features])
        return dynamic_model.predict(data.values.reshape(1, -1))[0]
    except:
        return random.randint(0, 1)


def classify_static(folder):
    try:
        file_features = get_static_file_features(dataset_path, folder)
        data = pd.DataFrame([file_features])
        return static_model.predict(data.values.reshape(1, -1))[0]
    except:
        return random.randint(0, 1)


def write_csv(output):
    with open('output.csv', 'w') as f:
        for key in output.keys():
            f.write("%s,%s\n" % (key, output[key]))


def load_models():
    with open(static_model_path, "rb") as f:
        model_static = pickle.load(f)
    with open(dynamic_model_path, "rb") as f:
        model_dynamic = pickle.load(f)

    return model_static, model_dynamic


output = dd(lambda: "Benign")
static_model, dynamic_model = load_models()

for file in files:
    if os.path.isfile(os.path.join(dataset_path, file)):
        prediction = classify_dynamic(file)
        key = file.split(".")[0]
        if prediction == 0:
            output[key] = "Benign"
        else:
            output[key] = "Malware"
    else:
        prediction = classify_static(file)
        key = file.split(".")[0]
        if prediction == 0:
            output[key] = "Benign"
        else:
            output[key] = "Malware"

write_csv(output)
